package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"
	"time"

	database "github.com/deribewsoftware/event_managemnt/Database"
	"github.com/deribewsoftware/event_managemnt/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.CreateUserInput) (*model.User, error) {
	randNumber, err := rand.Int(rand.Reader, big.NewInt(100))
	if err != nil {
		return nil, err
	}

	createdUser := &model.User{
		ID:        uint(randNumber.Int64()),
		Name:      input.Name,
		Email:     input.Email,
		Password:  input.Password,
		CreatedAt: fmt.Sprintf("%v", time.Now().Format(time.RFC3339)),
		UpdatedAt: fmt.Sprintf("%v", time.Now().Format(time.RFC3339)),
	}

	result := database.DB.Create(&createdUser)
	if result.Error != nil {
		// Handle the error appropriately, here I'm assuming you're using Gin framework

		return nil, result.Error
	}

	return createdUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id *string, input *model.UpdateUserInput) (*model.User, error) {
	var existingUser model.User
	if err := database.DB.First(&existingUser, id).Error; err != nil {
		return nil, err
	}

	// Update fields based on input
	existingUser.Name = *input.Name
	existingUser.Email = *input.Email

	if err := database.DB.Save(&existingUser).Error; err != nil {
		return nil, err
	}

	return &existingUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id *string) (*model.DeleteUserResponse, error) {
	// Assuming model.DeleteUserResponse has a boolean field `Success`
	deleteResponse := &model.DeleteUserResponse{}

	// Use Gorm to delete the user with the provided ID
	if err := database.DB.Delete(&model.User{}, id).Error; err != nil {
		return deleteResponse, err
	}

	// Set Success to true since the user deletion was successful

	return deleteResponse, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User

	// Use Gorm to retrieve all users from the database
	if err := database.DB.Find(&users).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	var user model.User

	// Use Gorm to retrieve a user from the database based on the provided ID
	if err := database.DB.First(&user, id).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
